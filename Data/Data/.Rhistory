setwd("C:/Users/dbrekk/Desktop/SWC_fall2017/R_intro")
3+5
sqrt(64)
sqrt(64)
print("Wow")
print(64)
print("Wow)
install.packages("knitr")
library(knitr)
install.packages("knitr")
library(knitr)
?print
help(mean)
#variable********
name <- "Jane"
price <- 3.99
price
name
print(price)
mass <- 47.5
mass
ls
ls()
rm(name)
rm(name)
rm(list=ls())
res<- sqrt(64)
res
age <- 45
length(age)
str(age)
typeof(age)
score <- 79
score
is.integer(score)
typof(is.integer(score))
typof(is.integer(score))
typeof(is.integer(score))
#nested functions
#how to create a multi-element variable
v <- c(1:10)
v
length(v)
str(v)
head(v, n=2)
tail(v, n=3)
#manipulate data
v <- c(v, 56)
v
#vectorization
v1 <- v*2
v1
#vectorization
v1 <- v*2
v2
#change data type
v2 <- as.character(v1)
v2
#matrices
m <- matrix(c(1:18), 3, 6)
m
dim(m)
print("Wow)
install.packages("knitr")
library(knitr)
?print
help(mean)
#variable********
name <- "Jane"
price <- 3.99
price
name
print(price)
mass <- 47.5
mass
ls()
rm(name)
rm(li <- st=ls())
res<- sqrt(64)
res
age <- 45
length(age)
str(age)
typeof(age)
score <- 79
score
is.integer(score)
typeof(is.integer(score))
#nested functions
#how to create a multi-element variable
v <- c(1:10)
v
length(v)
str(v)
head(v, n=2)
tail(v, n=3)
#manipulate data
v <- c(v, 56)
v
#vectorization
v1 <- v*2
v1
#change data type
v2 <- as.character(v1)
v2
#matrices
m <- matrix(c(1:18), 3, 6)
m
dim(m)
#categorical variable
#factor
f <- factor(c("M", "F"", "F"))
print("Wow)
install.packages("knitr")
library(knitr)
?print
help(mean)
#variable********
name <- "Jane"
price <- 3.99
price
name
print(price)
mass <- 47.5
mass
ls()
rm(name)
rm(li <- st=ls())
res<- sqrt(64)
res
age <- 45
length(age)
str(age)
typeof(age)
score <- 79
score
is.integer(score)
typeof(is.integer(score))
#nested functions
#how to create a multi-element variable
v <- c(1:10)
v
length(v)
str(v)
head(v, n=2)
tail(v, n=3)
#manipulate data
v <- c(v, 56)
v
#vectorization
v1 <- v*2
v1
#change data type
v2 <- as.character(v1)
v2
#matrices
m <- matrix(c(1:18), 3, 6)
m
dim(m)
#categorical variable
#factor
f <- factor(c("M","F, "F"))
print("Wow)
install.packages("knitr")
library(knitr)
?print
help(mean)
#variable********
name <- "Jane"
price <- 3.99
price
name
print(price)
mass <- 47.5
mass
ls()
rm(name)
rm(li <- st=ls())
res<- sqrt(64)
res
age <- 45
length(age)
str(age)
typeof(age)
score <- 79
score
is.integer(score)
typeof(is.integer(score))
#nested functions
#how to create a multi-element variable
v <- c(1:10)
v
length(v)
str(v)
head(v, n=2)
tail(v, n=3)
#manipulate data
v <- c(v, 56)
v
#vectorization
v1 <- v*2
v1
#change data type
v2 <- as.character(v1)
v2
#matrices
m <- matrix(c(1:18), 3, 6)
m
dim(m)
#categorical variable
#factor
f <- factor(c("M", "F, "F"))
f <- factor(c("M","F" ,"F"))
f <- factor(c("M","F" ,"F"))
f
str(f)
f <- factor(c("M","F" ,"F"))
f
str(f)
# List
l <- list("Afghanistan", 1952, 86769)
l
str(l)
length(l)
e2 <- factor(c("liquid", "solid")
e2 <- factor(c("liquid", "solid"))
e2 <- factor(c("liquid", "solid", "liquid"))
e3 <- c(4.99, 2.99, 3.29, 1.89)
e1 <- c("chicken", "soup", "salad", "tea")
myOrder <- list(e1, e2, e3)
View(myOrder)
e2 <- factor(c("solid", "liquid","solid", "liquid"))
myOrder <- list(e1, e2, e3)
myOrder
myOrder
length(myOrder)
str(myOrder)
myOrder
length(menuItems)
length(menuType)
length(menuCost)
length(menuItems)
menuCost <- c(4.99, 2.99, 3.29, 1.89)
menuType <- factor(c("solid", "liquid","solid", "liquid"))
menuItems <- c("chicken", "soup", "salad", "tea")
length(menuItems)
length(menuType)
length(menuCost)
myOrder_df <- data.frame(menuItems, menuType, menuCost)
myOrder_df
#data subsets
#by position index
v <-c(10:20)
v
v[7]
v[7:10]
v[7:10][-C(7:10)]
v
v[-C(7:10)]
#data subsets
#by position index
v <-c(10:20)
v[-C(7:10)]
v
v[-C(7:10)]
myOrder[1]
myOder[3]
myOrder[3]
myOder
myOrder
myOrder_df
myOrder_df[3,3]
myOrder_df[,3]
myOrder_df[3,]
myOrder_df[3]
#subset by name
myOrder_df$menuType
V <- c(2,3,4,5,6,5,6)
v
V <- c(2,3,4,5,6,5,6)
v
v1 <- v[v==5]
v1
V <- c(2,3,4,5,6,5,6)
v
v1 <- v[v==5]
v1
V <-c(2,3,4,5,6,5,6)
v
v <-c(2,3,4,5,6,5,6)
v
v1 <- v[v==5]
v1
df1 <- myOrder_df[myOrder_df$menuType]
df1 <- myOrder_df[myOrder_df$menuType=="liquid"]
df1 <- myOrder_df[myOrder_df$menuType == "liquid"]
df1
df1 <- myOrder_df[myOrder_df$menuType == "liquid",]
df1
df2 <- myOrder_df[myOrder_df$menuCost<3,]
df2
myOrder_df$menuType == "liquid"
#download dataset
myData <- read.table("gapminder.txt", header = TRUE)
#download dataset
myData <- read.table("gapminder.txt", header = TRUE)
setwd("C:/Users/dbrekk/Desktop/SWC_fall2017/Data/Data")
#download dataset
myData <- read.table("gapminder.txt", header = TRUE)
View(myData)
myData
myData <- read.table("C:\Users\dbrekk\Desktop\SWC_fall2017\Data\Data", header = TRUE)
#download dataset
myData <- read.table("gapminder.txt", header = TRUE)
myData
head(myData, n=6)
head(myData)
dim(myData)
str(myData)
typeof(myData)
typeof(myData, 1)
typeof(myData$country)
myData[3]
myData[c(3,5)]
myData$country
Sweden <- myData[myData$country == "Sweden"]
#subset by name
myOrder_df$menuType
myData
Sweden <- myData[myData$country == "Sweden"]
life <- mydata[myData$lifeExp < 70]
life <- myData[myData$lifeExp < 70]
life <- myData[myData$lifeExp < 70,]
Sweden <- myData[myData$country == "Sweden",]
life
Sweden
Mil <- myData$pop/6
Combo <- c(myData, Mil)
Combo <- c(myData, Mil)
Combo
Mil <- myData$pop/1000000
Combo <- c(myData, Mil)
Combo
#unique list of countries
unique(myData$country)
myData$PopM <- myData$pop/10^6
myDataFull<-read.table("gapminder.txt", header = TRUE)
#life expectancy across the years script
myDataFull<-read.table("gapminder.txt", header = TRUE)
Canada <- myDataFull[myDataFull$country == "Canada"]
#life expectancy across the years script
myDataFull<-read.table("gapminder.txt", header = TRUE)
Canada<-myDataFull[myDataFull$country == "Canada"]
#life expectancy across the years script
myDataFull <- read.table("gapminder.txt", header = TRUE)
Canada <- myDataFull[myDataFull$country == "Canada"]
#life expectancy across the years script
myDataFull <-  read.table("gapminder.txt", header = TRUE)
Canada <-  myDataFull[myDataFull$country == "Canada"]
Canada <-  myDataFull[myDataFull$country == "Canada",]
#plot life expectancy over the years
plot(Canada$year, Canada$lifeExp, col = "blue", type = "l")
#open the file
png(Canada.png)
#plot life expectancy over the years
#open the file
png(Canada.png)
plot(Canada$year, Canada$lifeExp, col = "blue", type = "l")
#plot life expectancy over the years
#open the file
png("Canada.png")
source("PlotLifeExp.R")
source("PlotLifeExp.R")
#Write a script to calculate mean gdpPerCapita for African and European
#countries.
#Try to make a barplot to display your results
#### Hint : ?mean ?barplot
myDataChallenge <-  read.table("gapminder.txt", header = TRUE)
Countries <- c((myDataChallenge$continent == "Africa",), (myDataChallenge$continent =="Europe"))
Countries <- c[(myDataChallenge$continent == "Africa",), (myDataChallenge$continent =="Europe")]
myDataChallenge[c(myDataChallenge[(myDataChallenge$continent == "Africa",], myDataChallenge[(myDataChallenge$continent == "Europe",]]
myDataChallenge[c(myDataChallenge[(myDataChallenge$continent == "Africa",], myDataChallenge[(myDataChallenge$continent == "Europe",])]
africa <- myDataChallenge[myDataChallenge$continent == "Africa",]
mean.afri <- mean(africa$gdpPercap)
mean.afri
europe <- myDataChallenge[myDataChallenge$continent == "Europe",]
mean.eur <- mean(europe$gdpPercap)
mean.eur
#store the mean values in a vector
afri.Euro.Mean <- c(mean.afri, mean.eur)
png (afri.Euro.Mean.png)
